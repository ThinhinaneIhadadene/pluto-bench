# CLooG script generated automatically by PLUTO 0.11.4-311-g28e4655
# language: C
c

1 3
1 1 0 

1
my_rank 

# Number of statements
26

# S1 (/* unknown - failure constructing stmt body */)
13 9
1 0 0 0 1 0 0 0 0 
1 0 0 0 -1 0 0 0 4994 
1 0 0 0 0 1 0 0 0 
1 0 0 0 0 -1 0 0 4994 
1 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 -1 0 2 
0 0 0 0 0 0 0 0 0 
1 -1 0 0 0 1 0 0 0 
1 1 0 0 0 -1 0 0 0 
1 0 -250 0 0 2 1 0 0 
1 0 250 0 0 -2 -1 0 249 
1 0 0 -250 0 12 4 0 0 
1 0 0 250 0 -12 -4 0 249 
0 0 0

# S2 (prod1 += (src[ q +  r][ w][ cc] * kernelX[ r]);)
14 10
1 0 0 0 1 0 0 0 0 0 
1 0 0 0 -1 0 0 0 0 4994 
1 0 0 0 0 1 0 0 0 0 
1 0 0 0 0 -1 0 0 0 4994 
1 0 0 0 0 0 1 0 0 0 
1 0 0 0 0 0 -1 0 0 2 
1 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 0 -1 0 4 
1 -1 0 0 0 1 0 0 0 0 
1 1 0 0 0 -1 0 0 0 0 
1 0 -250 0 0 2 1 0 0 0 
1 0 250 0 0 -2 -1 0 0 249 
1 0 0 -250 0 12 4 1 0 0 
1 0 0 250 0 -12 -4 -1 0 249 
0 0 0

# S3 (/* unknown - failure constructing stmt body */)
13 9
1 0 0 0 1 0 0 0 0 
1 0 0 0 -1 0 0 0 4994 
1 0 0 0 0 1 0 0 0 
1 0 0 0 0 -1 0 0 4994 
1 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 -1 0 2 
0 0 0 0 0 0 0 0 0 
1 -1 0 0 0 1 0 0 0 
1 1 0 0 0 -1 0 0 0 
1 0 -250 0 0 2 1 0 0 
1 0 250 0 0 -2 -1 0 249 
1 0 0 -250 0 12 4 0 4 
1 0 0 250 0 -12 -4 0 245 
0 0 0

# S4 (/* unknown - failure constructing stmt body */)
13 9
1 0 0 0 1 0 0 0 0 
1 0 0 0 -1 0 0 0 4994 
1 0 0 0 0 1 0 0 0 
1 0 0 0 0 -1 0 0 4994 
1 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 -1 0 2 
0 0 0 0 0 0 0 0 0 
1 -1 0 0 0 1 0 0 4 
1 1 0 0 0 -1 0 0 -4 
1 0 -250 0 0 2 1 0 8 
1 0 250 0 0 -2 -1 0 241 
1 0 0 -250 0 12 4 0 48 
1 0 0 250 0 -12 -4 0 201 
0 0 0

# S5 (prod2 += (temp[ q][ w +  e][ cc] * kernelY[ e]);)
14 10
1 0 0 0 1 0 0 0 0 0 
1 0 0 0 -1 0 0 0 0 4994 
1 0 0 0 0 1 0 0 0 0 
1 0 0 0 0 -1 0 0 0 4994 
1 0 0 0 0 0 1 0 0 0 
1 0 0 0 0 0 -1 0 0 2 
1 0 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 0 -1 0 4 
1 -1 0 0 0 1 0 0 0 4 
1 1 0 0 0 -1 0 0 0 -4 
1 0 -250 0 0 2 1 0 0 8 
1 0 250 0 0 -2 -1 0 0 241 
1 0 0 -250 0 12 4 1 0 48 
1 0 0 250 0 -12 -4 -1 0 201 
0 0 0

# S6 (/* unknown - failure constructing stmt body */)
13 9
1 0 0 0 1 0 0 0 0 
1 0 0 0 -1 0 0 0 4994 
1 0 0 0 0 1 0 0 0 
1 0 0 0 0 -1 0 0 4994 
1 0 0 0 0 0 1 0 0 
1 0 0 0 0 0 -1 0 2 
0 0 0 0 0 0 0 0 0 
1 -1 0 0 0 1 0 0 4 
1 1 0 0 0 -1 0 0 -4 
1 0 -250 0 0 2 1 0 8 
1 0 250 0 0 -2 -1 0 241 
1 0 0 -250 0 12 4 0 52 
1 0 0 250 0 -12 -4 0 197 
0 0 0

# S7 ()
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S8 (for (__p=0; __p<nprocs; __p++) { receiver_list[__p] = 0; })
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S9 (sigma_prod1_0(t1,t2,t3, my_rank, nprocs, receiver_list))
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S10 (IF_TIME(t_comm_start = rtclock());				for (__p=0; __p<nprocs; __p++) {				send_counts_prod1[__p] = receiver_list[__p]? send_count_prod1: 0;				}				MPI_Alltoall(send_counts_prod1, 1, MPI_INT,					recv_counts_prod1, 1, MPI_INT, MPI_COMM_WORLD);				req_count=0;				for (__p=0; __p<nprocs; __p++) {				if(send_counts_prod1[__p] >= 1) {IF_TIME(__total_count += send_count_prod1);				MPI_Isend(send_buf_prod1, send_count_prod1, MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}for (__p=0; __p<nprocs; __p++) {				if(recv_counts_prod1[__p] >= 1) {				MPI_Irecv(recv_buf_prod1+displs_prod1[__p], recv_counts_prod1[__p], MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}				MPI_Waitall(req_count, reqs, stats);				send_count_prod1 = 0;                 for (__p=0; __p<nprocs; __p++) curr_displs_prod1[__p] = 0;IF_TIME(t_comm += rtclock() - t_comm_start);)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S11 ()
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S12 (                for (__p=0; __p<nprocs; __p++) { receiver_list[__p] = 0; }                 sigma_temp_0(t1,t2,t3, my_rank, nprocs, receiver_list);                 for (__p=0; __p<nprocs; __p++) { if (receiver_list[__p] != 0) { 					send_count_temp = pack_temp_0(t1,t2,t3,send_buf_temp,send_count_temp); break;} })
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S13 (for (__p=0; __p<nprocs; __p++) { receiver_list[__p] = 0; })
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S14 (sigma_temp_0(t1,t2,t3, my_rank, nprocs, receiver_list))
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S15 (IF_TIME(t_comm_start = rtclock());				for (__p=0; __p<nprocs; __p++) {				send_counts_temp[__p] = receiver_list[__p]? send_count_temp: 0;				}				MPI_Alltoall(send_counts_temp, 1, MPI_INT,					recv_counts_temp, 1, MPI_INT, MPI_COMM_WORLD);				req_count=0;				for (__p=0; __p<nprocs; __p++) {				if(send_counts_temp[__p] >= 1) {IF_TIME(__total_count += send_count_temp);				MPI_Isend(send_buf_temp, send_count_temp, MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}for (__p=0; __p<nprocs; __p++) {				if(recv_counts_temp[__p] >= 1) {				MPI_Irecv(recv_buf_temp+displs_temp[__p], recv_counts_temp[__p], MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}				MPI_Waitall(req_count, reqs, stats);				send_count_temp = 0;                 for (__p=0; __p<nprocs; __p++) curr_displs_temp[__p] = 0;IF_TIME(t_comm += rtclock() - t_comm_start);)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S16 (proc = pi_0(t1,t2,t3, nprocs); if ((proc != my_rank) && (recv_counts_temp[proc] > 0)) { 					for (__p=0; __p<nprocs; __p++) { receiver_list[__p] = 0; } 					sigma_temp_0(t1,t2,t3, proc, nprocs, receiver_list); for (__p=0; __p<nprocs; __p++) { if (receiver_list[__p] != 0) 					{ curr_displs_temp[proc] = unpack_temp_0(t1,t2,t3,recv_buf_temp,displs_temp[proc],curr_displs_temp[proc]); break; } } })
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S17 ()
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S18 (for (__p=0; __p<nprocs; __p++) { receiver_list[__p] = 0; })
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S19 (sigma_prod2_0(t1,t2,t3, my_rank, nprocs, receiver_list))
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S20 (IF_TIME(t_comm_start = rtclock());				for (__p=0; __p<nprocs; __p++) {				send_counts_prod2[__p] = receiver_list[__p]? send_count_prod2: 0;				}				MPI_Alltoall(send_counts_prod2, 1, MPI_INT,					recv_counts_prod2, 1, MPI_INT, MPI_COMM_WORLD);				req_count=0;				for (__p=0; __p<nprocs; __p++) {				if(send_counts_prod2[__p] >= 1) {IF_TIME(__total_count += send_count_prod2);				MPI_Isend(send_buf_prod2, send_count_prod2, MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}for (__p=0; __p<nprocs; __p++) {				if(recv_counts_prod2[__p] >= 1) {				MPI_Irecv(recv_buf_prod2+displs_prod2[__p], recv_counts_prod2[__p], MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}				MPI_Waitall(req_count, reqs, stats);				send_count_prod2 = 0;                 for (__p=0; __p<nprocs; __p++) curr_displs_prod2[__p] = 0;IF_TIME(t_comm += rtclock() - t_comm_start);)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S21 ()
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S22 ()
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S23 (for (__p=0; __p<nprocs; __p++) { receiver_list[__p] = 0; })
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S24 (sigma_conv_0(t1,t2,t3, my_rank, nprocs, receiver_list))
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S25 (IF_TIME(t_comm_start = rtclock());				for (__p=0; __p<nprocs; __p++) {				send_counts_conv[__p] = receiver_list[__p]? send_count_conv: 0;				}				MPI_Alltoall(send_counts_conv, 1, MPI_INT,					recv_counts_conv, 1, MPI_INT, MPI_COMM_WORLD);				req_count=0;				for (__p=0; __p<nprocs; __p++) {				if(send_counts_conv[__p] >= 1) {IF_TIME(__total_count += send_count_conv);				MPI_Isend(send_buf_conv, send_count_conv, MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}for (__p=0; __p<nprocs; __p++) {				if(recv_counts_conv[__p] >= 1) {				MPI_Irecv(recv_buf_conv+displs_conv[__p], recv_counts_conv[__p], MPI_DOUBLE,					__p, 123, MPI_COMM_WORLD, &reqs[req_count++]);}}				MPI_Waitall(req_count, reqs, stats);				send_count_conv = 0;                 for (__p=0; __p<nprocs; __p++) curr_displs_conv[__p] = 0;IF_TIME(t_comm += rtclock() - t_comm_start);)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S26 ()
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# we want cloog to set the iterator names
0

# Number of scattering functions
26

# T(S1)
9 18
0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 -2 -1 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 -12 -4 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 -1 

# T(S2)
9 19
0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 -2 -1 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 -12 -4 -1 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 -2 

# T(S3)
9 18
0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 -2 -1 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 -12 -4 0 -4 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 -3 

# T(S4)
9 18
0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 -4 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 -2 -1 0 -8 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 -12 -4 0 -48 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 

# T(S5)
9 19
0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 0 -4 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 -2 -1 0 0 -8 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 -12 -4 -1 0 -48 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 -4 

# T(S6)
9 18
0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 -1 -1 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 -1 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 -4 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 -2 -1 0 -8 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 -12 -4 0 -52 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 -5 

# T(S7)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -1 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S8)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -2 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S9)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -3 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S10)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -4 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S11)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -5 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S12)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -6 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S13)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -7 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S14)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -8 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S15)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -9 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S16)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -10 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S17)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -11 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S18)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -12 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S19)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -13 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S20)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -14 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S21)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -15 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S22)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -16 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S23)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -17 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S24)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -18 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# T(S25)
9 14
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 -19 
0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 

# T(S26)
9 15
0 1 0 0 0 0 0 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 0 0 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 0 0 -20 
0 0 0 0 1 0 0 0 0 0 0 0 -1 0 0 
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 

# we will set the scattering dimension names
9
t1 t2 t3 t4 t5 t6 t7 t8 t9 
