# CLooG script generated automatically by PLUTO 0.11.4-311-g28e4655
# language: C
c

1 3
1 1 0 

1
my_rank 

# Number of statements
12

# S1 (if (pi_0(t1,t2,t3,nprocs) == my_rank)lw_count_prod1 = writeout_pack_prod1_0(t1,t2,t3,lw_buf_prod1,lw_count_prod1);)
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S2 (        assert((nprocs == 1) || (lw_count_prod1 <= displs_lw_prod1[1]));        MPI_Gather(&lw_count_prod1, 1, MPI_INT,        lw_recv_counts_prod1, 1, MPI_INT, 0, MPI_COMM_WORLD);MPI_Gatherv(lw_buf_prod1, lw_count_prod1, MPI_DOUBLE,        lw_recv_buf_prod1, lw_recv_counts_prod1, displs_lw_prod1, MPI_DOUBLE, 0, MPI_COMM_WORLD); lw_count_prod1 = 0;       for (__p=0; __p<nprocs; __p++) curr_displs_lw_prod1[__p] = displs_lw_prod1[__p];)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S3 (proc = pi_0(t1, t2, t3, nprocs);if ((my_rank != proc) && (lw_recv_counts_prod1[proc] > 0)) {curr_displs_lw_prod1[proc] = writeout_unpack_prod1_0(t1,t2,t3,lw_recv_buf_prod1,curr_displs_lw_prod1[proc]);})
6
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
0 0 0

# S4 (if (pi_0(t1,t2,t3,nprocs) == my_rank)lw_count_temp = writeout_pack_temp_0(t1,t2,t3,lw_buf_temp,lw_count_temp);)
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S5 (        assert((nprocs == 1) || (lw_count_temp <= displs_lw_temp[1]));        MPI_Gather(&lw_count_temp, 1, MPI_INT,        lw_recv_counts_temp, 1, MPI_INT, 0, MPI_COMM_WORLD);MPI_Gatherv(lw_buf_temp, lw_count_temp, MPI_DOUBLE,        lw_recv_buf_temp, lw_recv_counts_temp, displs_lw_temp, MPI_DOUBLE, 0, MPI_COMM_WORLD); lw_count_temp = 0;       for (__p=0; __p<nprocs; __p++) curr_displs_lw_temp[__p] = displs_lw_temp[__p];)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S6 (proc = pi_0(t1, t2, t3, nprocs);if ((my_rank != proc) && (lw_recv_counts_temp[proc] > 0)) {curr_displs_lw_temp[proc] = writeout_unpack_temp_0(t1,t2,t3,lw_recv_buf_temp,curr_displs_lw_temp[proc]);})
6
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
0 0 0

# S7 (if (pi_0(t1,t2,t3,nprocs) == my_rank)lw_count_prod2 = writeout_pack_prod2_0(t1,t2,t3,lw_buf_prod2,lw_count_prod2);)
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S8 (        assert((nprocs == 1) || (lw_count_prod2 <= displs_lw_prod2[1]));        MPI_Gather(&lw_count_prod2, 1, MPI_INT,        lw_recv_counts_prod2, 1, MPI_INT, 0, MPI_COMM_WORLD);MPI_Gatherv(lw_buf_prod2, lw_count_prod2, MPI_DOUBLE,        lw_recv_buf_prod2, lw_recv_counts_prod2, displs_lw_prod2, MPI_DOUBLE, 0, MPI_COMM_WORLD); lw_count_prod2 = 0;       for (__p=0; __p<nprocs; __p++) curr_displs_lw_prod2[__p] = displs_lw_prod2[__p];)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S9 (proc = pi_0(t1, t2, t3, nprocs);if ((my_rank != proc) && (lw_recv_counts_prod2[proc] > 0)) {curr_displs_lw_prod2[proc] = writeout_unpack_prod2_0(t1,t2,t3,lw_recv_buf_prod2,curr_displs_lw_prod2[proc]);})
6
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
0 0 0

# S10 (if (pi_0(t1,t2,t3,nprocs) == my_rank)lw_count_conv = writeout_pack_conv_0(t1,t2,t3,lw_buf_conv,lw_count_conv);)
6
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
6 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
6 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0

# S11 (        assert((nprocs == 1) || (lw_count_conv <= displs_lw_conv[1]));        MPI_Gather(&lw_count_conv, 1, MPI_INT,        lw_recv_counts_conv, 1, MPI_INT, 0, MPI_COMM_WORLD);MPI_Gatherv(lw_buf_conv, lw_count_conv, MPI_DOUBLE,        lw_recv_buf_conv, lw_recv_counts_conv, displs_lw_conv, MPI_DOUBLE, 0, MPI_COMM_WORLD); lw_count_conv = 0;       for (__p=0; __p<nprocs; __p++) curr_displs_lw_conv[__p] = displs_lw_conv[__p];)
6
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -25 0 125849 
1 -1 0 0 4994 
1 0 250 0 249 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
4 5
1 1 0 0 0 
1 0 -125 0 629749 
1 -1 0 0 4994 
1 0 250 0 -759 
0 0 0

# S12 (proc = pi_0(t1, t2, t3, nprocs);if ((my_rank != proc) && (lw_recv_counts_conv[proc] > 0)) {curr_displs_lw_conv[proc] = writeout_unpack_conv_0(t1,t2,t3,lw_recv_buf_conv,curr_displs_lw_conv[proc]);})
6
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4994 
1 0 1 -1 0 0 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 0 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
7 6
1 1 0 0 0 0 
1 0 -1 1 0 4998 
1 0 1 -1 0 -4 
1 0 -2 252 0 249 
1 0 1 -126 0 1 
1 -1 0 0 0 4994 
0 0 0 0 1 0 
7 6
1 0 1 -1 0 -4 
1 1 0 0 0 0 
1 0 1 -126 0 1 
1 0 -2 252 0 249 
1 -1 0 0 0 4994 
1 0 -1 1 0 4998 
0 0 0 0 1 0 
0 0 0

# we want cloog to set the iterator names
0

# Number of scattering functions
12

# T(S1)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -1 
0 0 0 0 1 0 0 -1 0 0 

# T(S2)
4 9
0 1 0 0 0 -1 0 0 0 
0 0 1 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 -2 
0 0 0 0 1 0 0 0 0 

# T(S3)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -3 
0 0 0 0 1 0 0 -1 0 0 

# T(S4)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -4 
0 0 0 0 1 0 0 -1 0 0 

# T(S5)
4 9
0 1 0 0 0 -1 0 0 0 
0 0 1 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 -5 
0 0 0 0 1 0 0 0 0 

# T(S6)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -6 
0 0 0 0 1 0 0 -1 0 0 

# T(S7)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -7 
0 0 0 0 1 0 0 -1 0 0 

# T(S8)
4 9
0 1 0 0 0 -1 0 0 0 
0 0 1 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 -8 
0 0 0 0 1 0 0 0 0 

# T(S9)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -9 
0 0 0 0 1 0 0 -1 0 0 

# T(S10)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -10 
0 0 0 0 1 0 0 -1 0 0 

# T(S11)
4 9
0 1 0 0 0 -1 0 0 0 
0 0 1 0 0 0 -1 0 0 
0 0 0 1 0 0 0 0 -11 
0 0 0 0 1 0 0 0 0 

# T(S12)
4 10
0 1 0 0 0 -1 0 0 0 0 
0 0 1 0 0 0 -1 0 0 0 
0 0 0 1 0 0 0 0 0 -12 
0 0 0 0 1 0 0 -1 0 0 

# we will set the scattering dimension names
4
t1 t2 t3 t4 
